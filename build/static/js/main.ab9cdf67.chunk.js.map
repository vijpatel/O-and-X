{"version":3,"sources":["common.js","AppProvider.js","components/Header.js","components/Main.js","components/Footer.js","App.js","index.js"],"names":["GAME_TYPES","TWO_PLAYERS","VERSUS_COMPUTER","ICON_CHARS","PLAYER_TURNS","HUMAN","COMPUTER","getEmptyCells","cells","map","val","idx","filter","item","isMoveLeft","length","checkGameState","lines","i","_lines$i","Object","slicedToArray","a","b","c","position","concat","iconType","isTie","getRandom","start","end","Math","floor","random","replace","index","value","toConsumableArray","slice","findRandomMove","emptyCells","minimax","depth","computerType","isMax","score","_lines$i2","evaluate","best","lengthCells","nextCells","max","min","findBestMove","bestVal","bestMove","moveVal","THINKING_TIME","AppContext","React","createContext","AppProvider","initState","gameType","currentIcon","playerTurn","Array","fill","gameState","state","_this","changeType","type","initNewGame","humanPlay","newGame","initGame","timeout","clearTimeout","setTimeout","randomMove","computerPlay","arguments","undefined","setState","applyState","prevState","nextIcon","nextPlayerTurn","makeAIMove","this","react_default","createElement","Provider","props","children","Component","GameType","name","Consumer","context","onClick","className","Header","Header_GameType","contextType","Cell","icon","isDoneClass","Board","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","boardRef","createRef","_this2","current","classList","add","remove","ref","Main_Cell","Main","textInfo","currentIconType","Main_Board","Footer","href","rel","App","AppProvider_AppProvider","src_components_Header","src_components_Main","src_components_Footer","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ab9cdf67.chunk.js","sourcesContent":["export const GAME_TYPES = {\n  TWO_PLAYERS: 0,\n  VERSUS_COMPUTER: 1\n}\n\nexport const ICON_TYPES = {\n  O: 0,\n  X: 1\n}\n\nexport const ICON_CHARS = ['O', 'X'];\n\nexport const PLAYER_TURNS = {\n  HUMAN: 0,\n  COMPUTER: 1\n}\n\nconst getEmptyCells = (cells) => {\n  return cells\n    .map((val, idx) => [val, idx])\n    .filter(item => item[0] === null);\n}\n\nconst isMoveLeft = (cells) => {\n  const emptyCells = getEmptyCells(cells);\n  return emptyCells.length > 0;\n}\n\nexport const checkGameState = (cells) => {\n  const lines = [\n    [0, 1, 2], // h.h0\n    [3, 4, 5], // h.h1 \n    [6, 7, 8], // h.h2\n    [0, 3, 6], // v.v0\n    [1, 4, 7], // v.v1\n    [2, 5, 8], // v.v2\n    [0, 4, 8], // d.d0\n    [2, 4, 6]  // d.d1\n  ];\n\n  let position = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\n      if (i >= 0 && i <= 2) position = `h h${i}`;\n      else if (i >= 3 && i <= 5) position = `v v${i - 3}`;\n      else position = `d${i - 6}`;\n\n      return {\n        position,\n        iconType: cells[a],\n        isTie: null\n      }\n    }\n  }\n\n  return {\n    position: \"\",\n    iconType: null,\n    isTie: isMoveLeft(cells) ? null : true\n  };\n}\n\nexport const getRandom = (start, end) => {\n  return start + Math.floor(Math.random() * (end - start));\n}\n\nexport const replace = (cells, index, value) => {\n  return [...cells.slice(0, index), value, ...cells.slice(index + 1, cells.length)];\n}\n\n/**\n * Random move\n */\nexport const findRandomMove = (cells) => {\n  const emptyCells = getEmptyCells(cells);\n\n  if (emptyCells.length > 0) {\n    const randomNum = getRandom(0, emptyCells.length);\n    const index = emptyCells[randomNum][1];\n\n    return index;\n  }\n\n  return null;\n}\n\n/**\n * Find best move based on Minimax algorithm\n */\nconst evaluate = (cells, computerType) => {\n  const lines = [\n    [0, 1, 2], // h.h0\n    [3, 4, 5], // h.h1 \n    [6, 7, 8], // h.h2\n    [0, 3, 6], // v.v0\n    [1, 4, 7], // v.v1\n    [2, 5, 8], // v.v2\n    [0, 4, 8], // d.d0\n    [2, 4, 6]  // d.d1\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\n      if (cells[a] === computerType) return 10;\n      return -10;\n    }\n  }\n\n  return 0;\n}\n\nconst minimax = (cells, depth, computerType, isMax) => {\n  const score = evaluate(cells, computerType);\n\n  // If Maximizer has won the game return his/her evaluated score \n  if (score === 10) return score - depth;\n\n  // If Minimizer has won the game return his/her evaluated score \n  if (score === -10) return score + depth;\n\n  // If there are no more moves and no winner then it is a tie \n  if (!isMoveLeft(cells)) return 0;\n\n  const lengthCells = cells.length;\n  let best;\n\n  // If this maximizer's move \n  if (isMax) {\n    best = -1000;\n\n    for (let i = 0; i < lengthCells; i++) {\n      const cell = cells[i];\n\n      if (cell === null) {\n        // Make a move\n        const nextCells = replace(cells, i, computerType);\n\n        // Call minimax recursively and choose the maximum value\n        best = Math.max(best, minimax(nextCells, depth + 1, computerType, !isMax));\n      }\n    }\n  } else {\n    best = 1000;\n\n    for (let i = 0; i < lengthCells; i++) {\n      const cell = cells[i];\n\n      if (cell === null) {\n        // Make a move\n        const nextCells = replace(cells, i, 1 - computerType);\n\n        // Call minimax recursively and choose the minimum value\n        best = Math.min(best, minimax(nextCells, depth + 1, computerType, !isMax));\n      }\n    }\n  }\n\n  return best;\n}\n\nexport const findBestMove = (cells, computerType) => {\n  let bestVal = -1000;\n  let bestMove = null;\n\n  const lengthCells = cells.length;\n\n  for (let i = 0; i < lengthCells; i++) {\n    const cell = cells[i];\n\n    if (cell === null) {\n      // Make a move\n      const nextCells = replace(cells, i, computerType);\n\n      // Compute evaluation function for this move. \n      const moveVal = minimax(nextCells, 0, computerType, false);\n\n      // If the value of the current move is more than the best value, then update best\n      if (moveVal > bestVal) {\n        bestVal = moveVal;\n        bestMove = i;\n      }\n    }\n  }\n\n  return bestMove;\n}","import React, { Component } from 'react';\nimport {\n  GAME_TYPES, PLAYER_TURNS,\n  checkGameState, getRandom, replace,\n  findBestMove, findRandomMove\n} from './common';\n\nconst THINKING_TIME = 500;\n\nexport const AppContext = React.createContext();\n\nexport default class AppProvider extends Component {\n  initState = {\n    gameType: GAME_TYPES.TWO_PLAYERS,\n    currentIcon: getRandom(0, 2),\n    playerTurn: getRandom(0, 2),\n    cells: new Array(9).fill(null),\n    gameState: {\n      position: \"\",\n      iconType: null,\n      isTie: null,\n    },\n  }\n\n  state = {\n    gameType: this.initState.gameType,\n    currentIcon: this.initState.currentIcon,\n    playerTurn: this.initState.playerTurn,\n    cells: this.initState.cells,\n    gameState: this.initState.gameState,\n\n    changeType: (type) => {\n      if (this.state.gameType !== type) {\n        this.initNewGame(type);\n      }\n    },\n    humanPlay: (index) => {\n      this.humanPlay(index)\n    },\n    newGame: () => {\n      this.initNewGame(this.state.gameType);\n    }\n  }\n\n  initGame = () => {\n    if (this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\n\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      this.timeout = setTimeout(() => {\n        const randomMove = findRandomMove(this.state.cells);\n        this.computerPlay(randomMove);\n      }, THINKING_TIME);\n    }\n  }\n\n  initNewGame = (type = this.initState.gameType) => {\n    this.setState(() => {\n      return {\n        gameType: type,\n        currentIcon: getRandom(0, 2),\n        playerTurn: getRandom(0, 2),\n        cells: this.initState.cells,\n        gameState: this.initState.gameState,\n      }\n    }, () => {\n      this.initGame();\n    });\n  }\n\n  applyState = (prevState, index) => {\n    const cells = prevState.cells;\n    const nextIcon = 1 - prevState.currentIcon;\n    const nextPlayerTurn = 1 - prevState.playerTurn;\n    const nextCells = replace(cells, index, prevState.currentIcon);\n    const gameState = checkGameState(nextCells);\n\n    return {\n      gameState: gameState,\n      currentIcon: nextIcon,\n      playerTurn: nextPlayerTurn,\n      cells: nextCells\n    }\n  }\n\n  humanPlay = (index) => {\n    if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\n      (this.state.gameType === GAME_TYPES.TWO_PLAYERS || this.state.playerTurn === PLAYER_TURNS.HUMAN)) {\n\n      this.setState(prevState => {\n        return this.applyState(prevState, index);\n      }, () => {\n        // Make a move for computer if the game is in 'versus computer' mode\n        if (this.state.gameState.position === \"\" &&\n          this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n          this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\n\n          setTimeout(() => {\n            this.makeAIMove();\n          }, THINKING_TIME);\n        }\n      });\n    }\n  }\n\n  computerPlay = (index) => {\n    if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\n      this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\n\n      this.setState(prevState => this.applyState(prevState, index));\n    }\n  }\n\n  makeAIMove = () => {\n    const bestMove = findBestMove(this.state.cells, this.state.currentIcon);\n\n    if (bestMove !== null) {\n      this.computerPlay(bestMove);\n    }\n  }\n\n  componentDidMount() {\n    this.initGame();\n  }\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { AppContext } from '../AppProvider';\nimport { GAME_TYPES } from '../common';\n\nimport './Header.css';\n\nconst GameType = (props) => {\n    const { value, name } = props;\n\n    return (\n      <AppContext.Consumer>\n        {context => (\n          <li \n            onClick={() => context.changeType(value)} \n            className={value === context.gameType ? \"active\" : \"\"}> \n            {name} \n          </li>\n        )}\n      </AppContext.Consumer>\n    )\n  }\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>XandO (Unbeatable TicTacToe)</h1>\n        <ul>\n          <GameType value={GAME_TYPES.TWO_PLAYERS} name=\"2 Players\" />\n          <GameType value={GAME_TYPES.VERSUS_COMPUTER} name=\"Versus Computer\" />\n        </ul>\n        <div>\n          <button onClick={() => this.context.newGame()}>New Game</button>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.contextType = AppContext;\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { AppContext } from '../AppProvider';\nimport { GAME_TYPES, PLAYER_TURNS, ICON_CHARS } from '../common';\nimport './Main.css';\n\nconst ICON_PLACE_HOLDDER = 'I';\n\nconst Cell = (props) => {\n  return (\n    <AppContext.Consumer>\n      {context => {\n        const value = context.cells[props.index];\n        const icon = value !== null ? ICON_CHARS[value] : ICON_PLACE_HOLDDER;\n        const isDoneClass = icon !== ICON_PLACE_HOLDDER ? 'done' : '';\n\n        return (\n          <button\n            className={`cell cell-${props.index} ${isDoneClass}`}\n            onClick={() => context.humanPlay(props.index)}>\n            {icon}\n          </button>\n        )\n      }}\n    </AppContext.Consumer>\n  )\n}\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.boardRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    if (this.context.gameState.position !== \"\") {\n      setTimeout(() => {\n        this.boardRef.current.classList.add('full');\n      }, 50);\n    } else {\n      this.boardRef.current.classList.remove('full');\n    }\n  }\n\n  render() {\n    return (\n      <div className={`board ${this.context.gameState.position}`} ref={this.boardRef}>\n        <div className=\"board-row\">\n          <Cell index={0} />\n          <Cell index={1} />\n          <Cell index={2} />\n        </div>\n\n        <div className=\"board-row\">\n          <Cell index={3} />\n          <Cell index={4} />\n          <Cell index={5} />\n        </div>\n\n        <div className=\"board-row\">\n          <Cell index={6} />\n          <Cell index={7} />\n          <Cell index={8} />\n        </div>\n      </div>\n    )\n  }\n}\nBoard.contextType = AppContext;\n\nclass Main extends Component {\n  render() {\n    let textInfo = '';\n    const currentIconType = this.context.currentIcon;\n\n    if (this.context.gameState.isTie) {\n      textInfo = 'Tie!';\n    } else {\n      if (this.context.gameType === GAME_TYPES.TWO_PLAYERS) {\n        if (this.context.gameState.position === \"\") {\n          textInfo = `It's player(${ICON_CHARS[currentIconType]}) turn`;\n        } else {\n          textInfo = `Player(${ICON_CHARS[1 - currentIconType]}) wins!`;\n        }\n      } else {\n        if (this.context.gameState.position === \"\") {\n          if (this.context.playerTurn === PLAYER_TURNS.HUMAN) textInfo = `It's your turn`;\n          else textInfo = `It's computer turn`;\n        } else {\n          if (this.context.playerTurn === PLAYER_TURNS.HUMAN) textInfo = `Computer win!`;\n          else textInfo = `You win!`;\n        }\n      }\n    }\n\n    return (\n      <main className=\"main\">\n        <div className=\"info\">{textInfo}</div>\n        <Board />\n      </main>\n    );\n  }\n}\nMain.contextType = AppContext;\n\nexport default Main;\n","import React, { Component } from 'react';\nimport './Footer.css';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        <a href=\" \" rel=\"noreferrer noopener\">\n          Home\n        </a>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport AppProvider from './AppProvider';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <AppProvider>\n        <div className=\"app\">\n          <Header />\n          <Main />\n          <Footer />\n        </div>\n      </AppProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}